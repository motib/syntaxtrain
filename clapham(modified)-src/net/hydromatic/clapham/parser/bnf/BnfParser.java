/* Generated By:JavaCC: Do not edit this line. BnfParser.java */
package net.hydromatic.clapham.parser.bnf;

import java.util.*;
import net.hydromatic.clapham.parser.*;

/**
 * Parser for grammars in Backus-Naur Form (BNF) notation.
 *
 * <p>The supported grammar is
 * <a href="http://en.wikipedia.org/wiki/Backus–Naur_form">Backus-Naur Form</a>,
 * extended with '*' (closure operator), '+' (mandatory repetition), but is not
 * the grammar officially known as 'Extended Backus-Naur Form' (EBNF).
 *
 * @author Julian Hyde
 * @version $Id: BnfParser.jj 3 2009-05-11 08:11:57Z jhyde $
 */
public class BnfParser implements BnfParserConstants {
    public static <E extends EbnfNode> void toString(
        StringBuilder buf, String start, List<E> list, String end)
    {
        int i = 0;
        buf.append(start);
        for (E node : list) {
            if (i++ > 0) {
                buf.append(", ");
            }
            node.toString(buf);
        }
        buf.append(end);
    }

/*
Example:

Wirth's BNF, expressed in JavaCC-like BNF:

SYNTAX     ::= ( PRODUCTION )*
PRODUCTION ::= IDENTIFIER "::=" EXPRESSION "." <eol>
EXPRESSION ::= TERM ( "|" TERM )*
TERM       ::= FACTOR+
FACTOR     ::= IDENTIFIER
           | LITERAL
           | "[" EXPRESSION "]"
           | "(" EXPRESSION ")"
           | "{" EXPRESSION "}"
IDENTIFIER ::= <letter>+
LITERAL    ::= """" <character>+ """"

*/

/*****************************************
 * Syntactical Descriptions              *
 *****************************************/

// SYNTAX ::= PRODUCTION*
  final public List<ProductionNode> Syntax() throws ParseException {
    List<ProductionNode> list = new ArrayList<ProductionNode>();
    ProductionNode p;
    label_1:
    while (true) {
      if (jj_2_1(4)) {
        ;
      } else {
        break label_1;
      }
      p = Production();
            list.add(p);
    }
    jj_consume_token(0);
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

// PRODUCTION ::= IDENTIFIER "::=" EXPRESSION
  final public ProductionNode Production() throws ParseException {
    IdentifierNode id;
    EbnfNode expression;
    id = Identifier();
    jj_consume_token(COLCOLEQ);
    expression = Expression();
        {if (true) return new ProductionNode(id, expression);}
    throw new Error("Missing return statement in function");
  }

// EXPRESSION ::= TERM ( "|" TERM )*
  final public EbnfNode Expression() throws ParseException {
    List<EbnfNode> list = new ArrayList<EbnfNode>();
    EbnfNode n;
    n = Term();
        list.add(n);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_2;
      }
      jj_consume_token(BAR);
      n = Term();
            list.add(n);
    }
        if (list.size() == 1) {
            {if (true) return list.get(0);}
        } else {
            {if (true) return new AlternateNode(list);}
        }
    throw new Error("Missing return statement in function");
  }

// TERM       ::= FACTOR +
  final public EbnfNode Term() throws ParseException {
    EbnfNode n;
    List<EbnfNode> list = new ArrayList<EbnfNode>();
    label_3:
    while (true) {
      if (jj_2_2(2147483647) && (!(getToken(1).kind == IDENTIFIER && getToken(2).kind == COLCOLEQ))) {
        ;
      } else {
        break label_3;
      }
      n = Factor();
            list.add(n);
    }
        switch (list.size()) {
        case 0:
            {if (true) return new EmptyNode();}
        case 1:
            {if (true) return list.get(0);}
        default:
            {if (true) return new SequenceNode(list);}
        }
    throw new Error("Missing return statement in function");
  }

// FACTOR       ::= FACTOR2 "+" ?
  final public EbnfNode Factor() throws ParseException {
    EbnfNode n;
    n = Factor2();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
            n = new MandatoryRepeatNode(n);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

// FACTOR2  ::= FACTOR3
//            | FACTOR3 "*"
//            | FACTOR3 "?"
  final public EbnfNode Factor2() throws ParseException {
    EbnfNode n;
    n = Factor3();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HOOK:
    case ASTERISK:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        jj_consume_token(ASTERISK);
            n = new RepeatNode(n);
        break;
      case HOOK:
        jj_consume_token(HOOK);
            n = new OptionNode(n);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

// FACTOR3  ::= IDENTIFIER
//            | LITERAL
//            | "(" EXPRESSION ")"
  final public EbnfNode Factor3() throws ParseException {
    EbnfNode n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
    case BRACKETED_IDENTIFIER:
      n = Identifier();
      break;
    case LITERAL:
      n = Literal();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      n = Expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

// IDENTIFIER ::= <letter>+
  final public IdentifierNode Identifier() throws ParseException {
    String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      s = jj_consume_token(IDENTIFIER).image;
        {if (true) return new IdentifierNode(s);}
      break;
    case BRACKETED_IDENTIFIER:
      s = jj_consume_token(BRACKETED_IDENTIFIER).image;
        String stripped = s.substring(1, s.length() - 1);
        {if (true) return new IdentifierNode(stripped);}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// LITERAL    = """" character+ """"
  final public LiteralNode Literal() throws ParseException {
    String s;
    s = jj_consume_token(LITERAL).image;
        assert s.startsWith("\u005c"") && s.endsWith("\u005c"") : s;
        {if (true) return new LiteralNode(s.substring(1, s.length() - 1));}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_5() {
    if (jj_3R_8()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(HOOK)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(ASTERISK)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_6()) return true;
    if (jj_scan_token(COLCOLEQ)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_5()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(BRACKETED_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_4()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_7()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(BAR)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public BnfParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x80,0x140,0x140,0x3012,0x1002,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public BnfParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BnfParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new BnfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public BnfParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BnfParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public BnfParser(BnfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(BnfParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
