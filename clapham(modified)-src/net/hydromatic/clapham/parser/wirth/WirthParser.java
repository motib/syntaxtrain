/* Generated By:JavaCC: Do not edit this line. WirthParser.java */
package net.hydromatic.clapham.parser.wirth;

import java.util.*;
import net.hydromatic.clapham.parser.*;

/**
 * Parser for grammars in Wirth Syntax Notation.
 *
 * <p><a href="http://en.wikipedia.org/wiki/Wirth_syntax_notation">Wirth Syntax
 * Notation</a> (WSN) is an alternative to Backus-Naur Form.
 *
 * @author Julian Hyde
 * @version $Id: WirthParser.jj 3 2009-05-11 08:11:57Z jhyde $
 */
public class WirthParser implements WirthParserConstants {
    public static <E extends EbnfNode> void toString(
        StringBuilder buf, String start, List<E> list, String end)
    {
        int i = 0;
        buf.append(start);
        for (E node : list) {
            if (i++ > 0) {
                buf.append(", ");
            }
            node.toString(buf);
        }
        buf.append(end);
    }

/*
Example:

Wirth's BNF:

SYNTAX     = { PRODUCTION } .
PRODUCTION = IDENTIFIER "=" EXPRESSION "." .
EXPRESSION = TERM { "|" TERM } .
TERM       = FACTOR { FACTOR } .
FACTOR     = IDENTIFIER
           | LITERAL
           | "[" EXPRESSION "]"
           | "(" EXPRESSION ")"
           | "{" EXPRESSION "}" .
IDENTIFIER = letter { letter } .
LITERAL    = """" character { character } """" .
*/

/*****************************************
 * Syntactical Descriptions              *
 *****************************************/

// SYNTAX     = { PRODUCTION } .
  final public List<ProductionNode> Syntax() throws ParseException {
    List<ProductionNode> list = new ArrayList<ProductionNode>();
    ProductionNode p;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      p = Production();
            list.add(p);
    }
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

// PRODUCTION = IDENTIFIER "=" EXPRESSION "." .
  final public ProductionNode Production() throws ParseException {
    IdentifierNode id;
    EbnfNode expression;
    id = Identifier();
    jj_consume_token(EQ);
    expression = Expression();
    jj_consume_token(DOT);
        {if (true) return new ProductionNode(id, expression);}
    throw new Error("Missing return statement in function");
  }

// EXPRESSION = TERM { "|" TERM } .
  final public EbnfNode Expression() throws ParseException {
    List<EbnfNode> list = new ArrayList<EbnfNode>();
    EbnfNode n;
    n = Term();
        list.add(n);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(BAR);
      n = Term();
            list.add(n);
    }
        if (list.size() == 1) {
            {if (true) return list.get(0);}
        } else {
            {if (true) return new AlternateNode(list);}
        }
    throw new Error("Missing return statement in function");
  }

// TERM       = FACTOR { FACTOR } .
  final public EbnfNode Term() throws ParseException {
    List<EbnfNode> list = new ArrayList<EbnfNode>();
    EbnfNode n;
    n = Factor();
        list.add(n);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      n = Factor();
            list.add(n);
    }
        if (list.size() == 1) {
            {if (true) return list.get(0);}
        } else {
            {if (true) return new SequenceNode(list);}
        }
    throw new Error("Missing return statement in function");
  }

// FACTOR     = IDENTIFIER
//            | LITERAL
//            | "[" EXPRESSION "]"
//            | "(" EXPRESSION ")"
//            | "{" EXPRESSION "}" .
  final public EbnfNode Factor() throws ParseException {
    EbnfNode n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      n = Identifier();
      break;
    case LITERAL:
      n = Literal();
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      n = Expression();
      jj_consume_token(RBRACKET);
            n = new OptionNode(n);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      n = Expression();
      jj_consume_token(RPAREN);
      break;
    case LBRACE:
      jj_consume_token(LBRACE);
      n = Expression();
      jj_consume_token(RBRACE);
            n = new RepeatNode(n);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

// IDENTIFIER = letter { letter } .
  final public IdentifierNode Identifier() throws ParseException {
    String s;
    s = jj_consume_token(IDENTIFIER).image;
        {if (true) return new IdentifierNode(s);}
    throw new Error("Missing return statement in function");
  }

// LITERAL    = """" character { character } """" .
  final public LiteralNode Literal() throws ParseException {
    String s;
    s = jj_consume_token(LITERAL).image;
        assert s.startsWith("\u005c"") && s.endsWith("\u005c"") : s;
        {if (true) return new LiteralNode(s.substring(1, s.length() - 1));}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public WirthParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4,0x2000,0x2a6,0x2a6,};
   }

  /** Constructor with InputStream. */
  public WirthParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WirthParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new WirthParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public WirthParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new WirthParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public WirthParser(WirthParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(WirthParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
